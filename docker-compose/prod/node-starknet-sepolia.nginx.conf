server {
    listen 443 ssl http2;
    server_name ${DOMAIN_NAME};
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_private_key /etc/nginx/ssl/key.pem;
    
    # Modern SSL configuration for security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Proxy settings for gRPC
    location / {
        # gRPC specific headers
        grpc_pass grpc://node:10003;
        grpc_set_header Host $host;
        grpc_set_header X-Real-IP $remote_addr;
        grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        grpc_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-running gRPC calls
        grpc_read_timeout 300s;
        grpc_send_timeout 300s;
        
        # Error handling
        error_page 502 = /error502grpc;
    }
    
    # Handle gRPC errors gracefully
    location = /error502grpc {
        internal;
        add_header Content-Type application/grpc;
        add_header grpc-status 14;
        add_header grpc-message "Service temporarily unavailable";
        return 204;
    }
    
    # Health check endpoint (if your gRPC service supports HTTP health checks)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Logging
    access_log /var/log/nginx/paynet_access.log;
    error_log /var/log/nginx/paynet_error.log;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name ${DOMAIN_NAME};
    return 301 https://$server_name$request_uri;
}
