services:
# Mint
  signer:
    image: "ghcr.io/nutty-raccoon/paynet-signer:${SIGNER_VERSION}"
    restart: always
    environment:
      - ROOT_KEY
      - GRPC_PORT=10001
      # Open telemetry
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=signer
    ports:
      - "10001:10001"
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=localhost:10001"]
      start_period: 1s
      interval: 3s
      retries: 3

  node:
    image: "ghcr.io/nutty-raccoon/paynet-node:${NODE_VERSION}"
    restart: always
    environment:
      - PG_URL
      - SIGNER_URL=http://signer:10001
      - GRPC_PORT=10003
      # Open telemetry
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=node
      # Starknet
      - STARKNET_CASHIER_ACCOUNT_ADDRESS
      - STARKNET_CASHIER_PRIVATE_KEY
      - STARKNET_RPC_NODE_URL=https://starknet-sepolia.public.blastapi.io/rpc/v0_8
      - STARKNET_SUBSTREAMS_URL=https://testnet.starknet.streamingfast.io:443
    ports:
      - "10003:10003"
    depends_on:
      db:
        condition: service_healthy
      signer:
        condition: service_healthy
      block-fetcher:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=localhost:10003"]
      start_period: 1s
      interval: 3s
      retries: 3

# Open telemetry
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8888:8888"  
      - "8889:8889"  
      - "13133:13133"  
    volumes:
      - ./observability/docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    restart: always
    depends_on:
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started
      loki:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:13133/"]
      interval: 5s
      timeout: 2s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./observability/docker/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 5s
      timeout: 2s
      retries: 3

  jaeger:
    image: jaegertracing/jaeger:latest
    environment:
        - SPAN_STORAGE_LOCAL_CLOCK_SKEW_ADJUSTMENT_ENABLED=true  # Enable clock skew adjustment
    ports:
      - "16686:16686"     # Jaeger UI
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:14269/"]
      interval: 5s
      timeout: 2s
      retries: 3

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./observability/docker/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: always
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 5s
      timeout: 2s
      retries: 3

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
