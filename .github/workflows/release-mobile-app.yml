name: Release

on:
  push:
    tags:
      - 'mobile-app-v*'

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf gnupg2

      - name: setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/sdk
            /usr/local/lib/android/sdk
          key: android-sdk-${{ runner.os }}-ndk-27.0.11902837

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@1.86.0
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

          
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"

      - name: install bun dependencies
        working-directory: mobile/salto
        run: bun install --frozen-lockfile

      - name: restore Rust cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            mobile/target/
          key: ubuntu-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-cargo-mobile-

      - name: Setup Android signing
        working-directory: mobile/salto/src-tauri/gen/android
        run: |
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
          echo "Keystore properties created."

      - name: Build app bundle
        working-directory: mobile/salto
        run: bun tauri android build -v
        env:
          NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.0.11902837

      - name: Get Tauri App Version
        working-directory: mobile/salto
        id: app-version
        run: |
          CARGO_TOML_PATH="src-tauri/Cargo.toml"
          echo "Attempting to read version from $CARGO_TOML_PATH"

          if [ ! -f "$CARGO_TOML_PATH" ]; then
            echo "Error: $CARGO_TOML_PATH not found."
            exit 1
          fi

          echo "--- Relevant content from $CARGO_TOML_PATH (looking for 'version = \"...' line) ---"
          grep '^version = "' "$CARGO_TOML_PATH" || echo "No line starting with 'version = \"' found in $CARGO_TOML_PATH."
          echo "--- End of relevant content ---"

          # Extract version string from Cargo.toml.
          # This looks for a line like 'version = "x.y.z"' in the [package] section.
          VERSION_STRING=$(grep '^version = "' "$CARGO_TOML_PATH" | head -n 1 | sed -e 's/version = "//' -e 's/"//')

          echo "Extracted version_string: '$VERSION_STRING'" # Debug output

          if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then # Check for empty or literal "null"
            echo "Error: Version not found or is invalid in $CARGO_TOML_PATH."
            echo "Please ensure $CARGO_TOML_PATH contains a line like 'version = \"x.y.z\"' (typically under the [package] section)."
            exit 1
          fi

          echo "Successfully extracted version: $VERSION_STRING"
          echo "version_string=$VERSION_STRING" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Rename APK file
        working-directory: mobile/salto
        run: |
          mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/salto-${{ steps.app-version.outputs.version_string }}.apk
     
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          name: App v${{ steps.app-version.outputs.version_string }}
          tag_name: mobile-app-v${{ steps.app-version.outputs.version_string }}
          body: 'See the assets to download this version and install.'
          draft: true
          prerelease: false
          files: |
            mobile/salto/src-tauri/gen/android/app/build/outputs/apk/universal/release/salto-${{ steps.app-version.outputs.version_string }}.apk

      - name: restore Rust cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            mobile/target/
          key: ubuntu-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
