name: Mobile release

on:
  push:
    tags:
      - 'mobile-app-v*'

concurrency:
  group: mobile-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    permissions:
      contents: write
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      - name: setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@1.86.0
        with:
          targets: aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim

      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"

      - name: install bun dependencies
        working-directory: mobile/salto
        run: bun install --frozen-lockfile

      - name: restore Rust cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            mobile/target/
          key: macos-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-latest-cargo-mobile-

      - name: Build iOS app
        working-directory: mobile/salto
        run: bun tauri ios build --export-method app-store-connect
        env:
          PRICE_PROVIDER_URL: https://price-provider.mobile.tdelabro.com
          WEB_APP_URL: https://invoice-payment.tdelabro.com
          # ios signing
          IOS_MOBILE_PROVISION: ${{ secrets.IOS_MOBILE_PROVISION }}
          IOS_CERTIFICATE: ${{ secrets.APPSTORE_IOS_DISTRIBUTION_CERTIFICATES_FILE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.APPSTORE_IOS_DISTRIBUTION_CERTIFICATES_PASSWORD }}

      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v3
        with: 
          app-path: './mobile/salto/src-tauri/gen/apple/build/arm64/salto.ipa' 
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: Save Rust cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            mobile/target/
          key: macos-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}

      - name: Cleanup keychain
        if: always()
        run: security delete-keychain build.keychain || true

  # android:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
   
  #     - name: Install system dependencies
  #       uses: awalsh128/cache-apt-pkgs-action@latest
  #       with:
  #         packages: libwebkit2gtk-4.1-dev
  #         version: 1.0

  #     - name: setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: "17"

  #     - name: Cache Android SDK
  #       id: cache-android-sdk
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.android/sdk
  #           /usr/local/lib/android/sdk
  #         key: android-sdk-${{ runner.os }}-ndk-27.0.11902837

  #     - name: Setup Android SDK and NDK
  #       uses: android-actions/setup-android@v3
  #       with:
  #         cmdline-tools-version: 12266719

  #     - name: Install NDK
  #       if: steps.cache-android-sdk.outputs.cache-hit != 'true'
  #       run: sdkmanager "ndk;27.0.11902837"

  #     - name: setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest

  #     - name: install Rust stable
  #       uses: dtolnay/rust-toolchain@1.86.0
  #       with:
  #         targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

        
  #     - uses: arduino/setup-protoc@v3
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         version: "28.x"

  #     - name: install bun dependencies
  #       working-directory: mobile/salto
  #       run: bun install --frozen-lockfile

  #     - name: restore Rust cache
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #           mobile/target/
  #         key: ubuntu-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ubuntu-latest-cargo-mobile-

  #     - name: Setup Android signing
  #       working-directory: mobile/salto/src-tauri/gen/android
  #       run: |
  #         echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
  #         echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
  #         base64 -d <<< "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" > $RUNNER_TEMP/keystore.jks
  #         echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
  #         echo "Keystore properties created."

  #     - name: Build app bundle
  #       working-directory: mobile/salto
  #       run: bun tauri android build
  #       env:
  #         NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.0.11902837
  #         PRICE_PROVIDER_URL: https://price-provider.mobile.tdelabro.com
  #         WEB_APP_URL: https://invoice-payment.tdelabro.com

  #     - name: Get Tauri App Version
  #       working-directory: mobile/salto
  #       id: app-version
  #       run: |
  #         CARGO_TOML_PATH="src-tauri/Cargo.toml"
  #         echo "Attempting to read version from $CARGO_TOML_PATH"

  #         if [ ! -f "$CARGO_TOML_PATH" ]; then
  #           echo "Error: $CARGO_TOML_PATH not found."
  #           exit 1
  #         fi

  #         echo "--- Relevant content from $CARGO_TOML_PATH (looking for 'version = \"...' line) ---"
  #         grep '^version = "' "$CARGO_TOML_PATH" || echo "No line starting with 'version = \"' found in $CARGO_TOML_PATH."
  #         echo "--- End of relevant content ---"

  #         # Extract version string from Cargo.toml.
  #         # This looks for a line like 'version = "x.y.z"' in the [package] section.
  #         VERSION_STRING=$(grep '^version = "' "$CARGO_TOML_PATH" | head -n 1 | sed -e 's/version = "//' -e 's/"//')

  #         echo "Extracted version_string: '$VERSION_STRING'" # Debug output

  #         if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then # Check for empty or literal "null"
  #           echo "Error: Version not found or is invalid in $CARGO_TOML_PATH."
  #           echo "Please ensure $CARGO_TOML_PATH contains a line like 'version = \"x.y.z\"' (typically under the [package] section)."
  #           exit 1
  #         fi

  #         echo "Successfully extracted version: $VERSION_STRING"
  #         echo "version_string=$VERSION_STRING" >> "$GITHUB_OUTPUT"
  #       shell: bash

  #     - name: Rename APK & AAB files
  #       working-directory: mobile/salto
  #       run: |
  #         mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/salto-${{ steps.app-version.outputs.version_string }}.apk
  #         mv ./src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab ./src-tauri/gen/android/app/build/outputs/bundle/universalRelease/salto-${{ steps.app-version.outputs.version_string }}.aab    
   
  #     - name: Publish
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: App v${{ steps.app-version.outputs.version_string }}
  #         tag_name: mobile-app-v${{ steps.app-version.outputs.version_string }}
  #         body: 'See the assets to download this version and install.'
  #         draft: true
  #         prerelease: false
  #         files: |
  #           mobile/salto/src-tauri/gen/android/app/build/outputs/apk/universal/release/salto-${{ steps.app-version.outputs.version_string }}.apk
  #           mobile/salto/src-tauri/gen/android/app/build/outputs/bundle/universalRelease/salto-${{ steps.app-version.outputs.version_string }}.aab    

  #     - name: Save Rust cache
  #       uses: actions/cache/save@v4
  #       if: always()
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #           mobile/target/
  #         key: ubuntu-latest-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
