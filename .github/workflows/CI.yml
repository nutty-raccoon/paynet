name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  ROOT_KEY: tprv8ZgxMBicQKsPeb6rodrmEXb1zRucvxYJgTKDhqQkZtbz8eY4Pf2EgbsT2swBXnnbDPQChQeFrFqHN72yFxzKfFAVsHdPeRWq2xqyUT2c4wH
  SIGNER_GRPC_PORT: 10001
  NODE_GRPC_PORT: 20001
  # For node
  PG_URL: postgres://postgres:password@localhost:5432/node
  SIGNER_URL: http://localhost:10001

jobs:
  fmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: clippy
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-cache-clippy-${{ hashFiles('Cargo.lock') }}
          cache-on-failure: true
          cache-all-crates: true
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --no-deps

  mobile-fmt:
    name: Check Formatting (mobile)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: rustfmt
      - name: Check formatting
        working-directory: mobile
        run: cargo fmt --all -- --check

  movile-clippy:
    name: Check clippy (mobile)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev

      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: clippy
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-mobile-cache-clippy-${{ hashFiles('mobile/Cargo.lock') }}
          cache-on-failure: true
          cache-all-crates: true
      - name: Run clippy
        working-directory: mobile
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --no-deps

  build-app-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-mock"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet,mock,keyset-rotation --locked"
            crate_name: node
          - name: "node-starknet"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet --locked"
            crate_name: node
          - name: "signer"
            build_cmd: "cargo build --release -p signer --locked"
            crate_name: signer
          - name: "starknet-on-chain-setup"
            build_cmd: "cargo build --release -p starknet-on-chain-setup --locked"
            crate_name: starknet-on-chain-setup
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.crate_name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target
          key: rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Upload ${{ matrix.name }} binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-binary
          path: target/release/${{ matrix.crate_name }}
          retention-days: 1
 

  build-test-binaries:
    name: Build test binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-tests"
            build_cmd: "cargo test -p node-tests --no-run --locked"
          - name: "signer-tests"
            build_cmd: "cargo test -p signer-tests --no-run --locked"
          - name: "e2e-tests"
            build_cmd: "cargo test -p e2e-tests --no-run --locked"
          - name: "concurrency-tests"
            build_cmd: "cargo test -p concurrency-tests --no-run --locked"
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Extract and upload ${{ matrix.name }} test binaries
        run: |
          # Extract binary paths using the shell oneliner
          binaries=$(${{ matrix.build_cmd }} 2>&1 | grep "Executable" | sed 's/.*(\(.*\))/\1/')
          
          if [ -z "$binaries" ]; then
            echo "Error: Could not find any test binaries for ${{ matrix.name }}"
            exit 1
          fi
          
          # Create a directory for the artifact
          mkdir -p ./test-binaries/
          
          # Copy each binary with its original name
          for binary in $binaries; do
            if [ -f "$binary" ]; then
              binary_name=$(basename "$binary")
              cp "$binary" "./test-binaries/$binary_name"
              chmod +x "./test-binaries/$binary_name"
              echo "Copied: $binary -> ./test-binaries/$binary_name"
            else
              echo "Warning: Binary not found: $binary"
            fi
          done
          
          # List what we have
          echo "Test binaries prepared:"
          ls -l ./test-binaries/

      - name: Upload ${{ matrix.name }} test binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-test-binaries
          path: ./test-binaries
          retention-days: 1

  build-starknet-contracts:
    name: Build Starknet contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            contracts/starknet/invoice
          sparse-checkout-cone-mode: false

      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.12.0"
          scarb-lock: contracts/starknet/invoice/Scarb.lock
          cache: true
          cache-targets: true
      
      - name: Install Starkli
        run: |
          mkdir -p /tmp/tools
          curl -s -L https://github.com/xJonathanLEI/starkli/releases/download/v0.4.2/starkli-$(uname -m)-unknown-linux-gnu.tar.gz | tar xz -C /tmp/tools/
          chmod +x /tmp/tools/starkli
      
      - name: Build contracts
        working-directory: ./contracts/starknet/invoice
        run: scarb --profile release build
      
      - name: Generate compiled class hash
        working-directory: ./contracts/starknet/invoice
        run: |
          /tmp/tools/starkli class-hash ./target/release/invoice_payment_InvoicePayment.compiled_contract_class.json > ./compiled_class_hash.txt
      
      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: starknet-contracts
          path: |
            contracts/starknet/invoice/target/release/invoice_payment_InvoicePayment.contract_class.json
            contracts/starknet/invoice/compiled_class_hash.txt
          retention-days: 1

  build-ethereum-contracts:
    name: Build Ethereum contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            contracts/ethereum/invoice
            .gitmodules
          sparse-checkout-cone-mode: false

      - uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        working-directory: ./contracts/ethereum/invoice
        run: forge install

      - name: Show Forge version
        working-directory: ./contracts/ethereum/invoice
        run: forge --version

      - name: Check Formatting
        working-directory: ./contracts/ethereum/invoice
        run: forge fmt --check

      - name: Build contracts
        working-directory: ./contracts/ethereum/invoice
        run: forge build
      
      - name: Test contracts
        working-directory: ./contracts/ethereum/invoice
        run: forge test

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ethereum-contracts
          path: |
            contracts/ethereum/invoice/out/InvoicePayment.sol/InvoicePayment.json
            contracts/ethereum/invoice/out/InvoicePayment.sol/IInvoicePayment.json
          retention-days: 1

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Those are the only crates containings unit tests at the moment.
        # The list will have to be manually updated when otheres are added.
        include:
          - test_cmd: "cargo test -p db-node"
            crate_name: db-node
            cache_key: "default"
          - test_cmd: "cargo test -p nuts --no-default-features"
            crate_name: nuts
            cache_key: "no-default"
          - test_cmd: "cargo test -p nuts --features=starknet,sqlx,rusqlite,nut13,nut19"
            crate_name: nuts
            cache_key: "all-features"
          - test_cmd: "cargo test -p starknet-types --no-default-features"
            crate_name: starknet-types
            cache_key: "no-default"
          - test_cmd: "cargo test -p wallet --no-default-features"
            crate_name: wallet
            cache_key: "no-default"
          - test_cmd: "cargo test -p wallet --no-default-features --features=tls,tls-allow-self-signed"
            crate_name: wallet
            cache_key: "tls"

    steps:
      - uses: actions/checkout@v4

      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.crate_name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Rust debug libs cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-

      - name: Run test
        run: ${{ matrix.test_cmd }}

  mock-tests:
    name: "Integration Tests (Mock)"
    needs: [ build-app-binaries, build-test-binaries ]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: node
          PGUSER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Download node-mock binary
        uses: actions/download-artifact@v4
        with:
          name: node-mock-binary
          path: target/release/

      - name: Download signer binary
        uses: actions/download-artifact@v4
        with:
          name: signer-binary
          path: target/release/

      - name: Download node tests binary
        uses: actions/download-artifact@v4
        with:
          name: node-tests-test-binaries
          path: node-tests/

      - name: Download signer tests binary
        uses: actions/download-artifact@v4
        with:
          name: signer-tests-test-binaries
          path: signer-tests/

      - name: Make binaries executable
        run: |
          chmod +x target/release/node
          chmod +x target/release/signer
          chmod +x node-tests/*
          chmod +x signer-tests/*

      - name: Start signer service
        run: |
          RUST_LOG=info ROOT_KEY="${{ env.ROOT_KEY }}" GRPC_PORT=10001 ./target/release/signer &
          echo $! > signer.pid
        
      - name: Wait for signer service to be ready
        run: |
          echo "Waiting for signer to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10001; do sleep 1; done'
          
      - name: Run signer integration tests
        env:
          GRPC_PORT: 10001
          ROOT_KEY: "${{ env.ROOT_KEY }}"
        run: |
          # Run all executables in the signer-tests directory one after the other
          echo "Running all signer integration tests..."
          
          for test_binary in ./signer-tests/*; do
            if [ -f "$test_binary" ] && [ -x "$test_binary" ]; then
              echo "Running: $(basename "$test_binary")"
              "$test_binary"
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "Test failed: $(basename "$test_binary") (exit code: $exit_code)"
                exit $exit_code
              fi
              echo "✓ Passed: $(basename "$test_binary")"
            fi
          done
          
          echo "All signer integration tests completed successfully!"

      - name: Start node service (mock)
        run: |
          RUST_LOG=info PG_URL="${{ env.PG_URL }}" SIGNER_URL="${{ env.SIGNER_URL }}" GRPC_PORT=10003 \
          ./target/release/node &
          echo $! > node.pid

      - name: Wait for node service to be ready
        run: |
          echo "Waiting for node to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10003; do sleep 1; done'
          
      - name: Run node integration tests
        env:
          GRPC_PORT: 10003
        run: |
          # Run all executables in the node-tests directory one after the other
          echo "Running all node integration tests..."
          
          for test_binary in ./node-tests/*; do
            if [ -f "$test_binary" ] && [ -x "$test_binary" ]; then
              echo "Running: $(basename "$test_binary")"
              "$test_binary"
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "Test failed: $(basename "$test_binary") (exit code: $exit_code)"
                exit $exit_code
              fi
              echo "✓ Passed: $(basename "$test_binary")"
            fi
          done
          
          echo "All node integration tests completed successfully!"

      - name: Cleanup services
        if: always()
        run: |
          if [ -f signer.pid ]; then
            kill $(cat signer.pid) || true
            rm signer.pid
          fi
          if [ -f node.pid ]; then
            kill $(cat node.pid) || true
            rm node.pid
          fi


  starknet-tests:
    name: "Integration Tests (Starknet)"
    needs: [ build-app-binaries, build-test-binaries, build-starknet-contracts ]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: node
          PGUSER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose/ci-testnet.yml
            crates/substreams/starknet/firehose/firehose-starknet-fss.yaml
            crates/substreams/starknet/firehose/firehose-starknet-rmr.yaml
          sparse-checkout-cone-mode: false

      - name: Start testnet services
        run: |
          docker compose -f docker-compose/ci-testnet.yml up -d

      - name: Download node-starknet binary
        uses: actions/download-artifact@v4
        with:
          name: node-starknet-binary
          path: target/release/

      - name: Download signer binary
        uses: actions/download-artifact@v4
        with:
          name: signer-binary
          path: target/release/

      - name: Download starknet-on-chain-setup binary
        uses: actions/download-artifact@v4
        with:
          name: starknet-on-chain-setup-binary
          path: target/release/

      - name: Download contract artifacts
        uses: actions/download-artifact@v4
        with:
          name: starknet-contracts
          path: contracts/starknet/invoice/

      - name: Download e2e tests binary
        uses: actions/download-artifact@v4
        with:
          name: e2e-tests-test-binaries
          path: e2e-tests

      - name: Download concurrency tests binary
        uses: actions/download-artifact@v4
        with:
          name: concurrency-tests-test-binaries
          path: concurrency-tests/

      - name: Make binaries executable
        run: |
          chmod +x target/release/node
          chmod +x target/release/signer
          chmod +x target/release/starknet-on-chain-setup
          chmod +x e2e-tests/*
          chmod +x concurrency-tests/*

      - name: Download firehose binaries
        run: |
           wget https://github.com/streamingfast/firehose-core/releases/download/v1.10.1/firehose-core_linux_x86_64.tar.gz
           wget https://github.com/streamingfast/firehose-starknet/releases/download/v1.1.1/firehose-starknet_linux_x86_64.tar.gz

           tar -xzf firehose-core_linux_x86_64.tar.gz
           tar -xzf firehose-starknet_linux_x86_64.tar.gz

           rm firehose-core_linux_x86_64.tar.gz firehose-starknet_linux_x86_64.tar.gz

      - name: Start firehose
        run: |
           ./firecore start --config-file crates/substreams/starknet/firehose/firehose-starknet-rmr.yaml --reader-node-path ./firestarknet &
           ./firecore start --config-file crates/substreams/starknet/firehose/firehose-starknet-fss.yaml &         

      - name: Run starknet on-chain setup
        run: |
          RUST_LOG=info ./target/release/starknet-on-chain-setup \
            --chain-id=SN_DEVNET \
            --url=http://localhost:5050 \
            --private-key=0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9 \
            --account-address=0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691 \
            declare \
            --sierra-json=./contracts/starknet/invoice/target/release/invoice_payment_InvoicePayment.contract_class.json \
            --compiled-class-hash=$(cat ./contracts/starknet/invoice/compiled_class_hash.txt)

      - name: Start signer service
        run: |
          RUST_LOG=info ROOT_KEY="${{ env.ROOT_KEY }}" GRPC_PORT=10001 ./target/release/signer &
          echo $! > signer.pid

      - name: Start node service (starknet)
        env:
          RUST_LOG: info
          PG_URL: "${{ env.PG_URL }}"
          SIGNER_URL: "${{ env.SIGNER_URL }}" 
          GRPC_PORT: 10003
          # Starknet
          STARKNET_CASHIER_ACCOUNT_ADDRESS: "0x64b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691" 
          STARKNET_CASHIER_PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
          STARKNET_RPC_NODE_URL: http://localhost:5050 
          STARKNET_SUBSTREAMS_URL: http://localhost:10016          
          STARKNET_CHAIN_ID: SN_DEVNET
          STARKNET_INDEXER_START_BLOCK: 0
        run: |
          # Starknet 
          ./target/release/node &
          echo $! > node.pid

      - name: Wait for local services to be ready
        run: |
          echo "Waiting for signer to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10001; do sleep 1; done'
          
          echo "Waiting for node to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10003; do sleep 1; done'

      - name: Run basic health checks
        run: |
          pg_isready -h localhost -p 5432 -U postgres
          curl -f http://localhost:5050/is_alive

      - name: Run E2E tests
        env:
          CHAIN_ID: SN_DEVNET
          NODE_URL: http://localhost:10003
          RPC_URL: http://localhost:5050
          PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
          ACCOUNT_ADDRESS: "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
        run: |
          # Run all executables in the e2e-tests directory one after the other
          echo "Running all e2e integration tests..."
          
          for test_binary in ./e2e-tests/*; do
            if [ -f "$test_binary" ] && [ -x "$test_binary" ]; then
              echo "Running: $(basename "$test_binary")"
              "$test_binary"
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "Test failed: $(basename "$test_binary") (exit code: $exit_code)"
                exit $exit_code
              fi
              echo "✓ Passed: $(basename "$test_binary")"
            fi
          done
          
          echo "All e2e integration tests completed successfully!"

      - name: Run concurrency tests
        env:
          CHAIN_ID: SN_DEVNET
          NODE_URL: http://localhost:10003
          RPC_URL: http://localhost:5050
          PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
          ACCOUNT_ADDRESS: "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
        run: |
          # Run all executables in the concurrency-tests directory one after the other
          echo "Running all concurrency integration tests..."
          
          for test_binary in ./concurrency-tests/*; do
            if [ -f "$test_binary" ] && [ -x "$test_binary" ]; then
              echo "Running: $(basename "$test_binary")"
              "$test_binary"
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "Test failed: $(basename "$test_binary") (exit code: $exit_code)"
                exit $exit_code
              fi
              echo "✓ Passed: $(basename "$test_binary")"
            fi
          done
          
          echo "All concurrency integration tests completed successfully!"

      - name: Cleanup
        if: always()
        run: |
          if [ -f signer.pid ]; then
            kill $(cat signer.pid) || true
            rm signer.pid
          fi
          if [ -f node.pid ]; then
            kill $(cat node.pid) || true
            rm node.pid
          fi
          docker compose -f docker-compose/ci-testnet.yml down
          docker system prune -f
