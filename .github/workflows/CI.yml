name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  ROOT_KEY: tprv8ZgxMBicQKsPeb6rodrmEXb1zRucvxYJgTKDhqQkZtbz8eY4Pf2EgbsT2swBXnnbDPQChQeFrFqHN72yFxzKfFAVsHdPeRWq2xqyUT2c4wH
  SIGNER_GRPC_PORT: 10001
  NODE_GRPC_PORT: 20001
  # For node
  PG_URL: postgres://postgres:password@localhost:5432/node
  SIGNER_URL: http://localhost:10001

jobs:
  fmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: clippy
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-cache-clippy-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true
          cache-all-crates: true
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --no-deps

  build-app-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-mock"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet,mock,keyset-rotation --locked"
            crate_name: node
          - name: "node-starknet"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet --locked"
            crate_name: node
          - name: "signer"
            build_cmd: "cargo build --release -p signer --locked"
            crate_name: signer
          - name: "starknet-on-chain-setup"
            build_cmd: "cargo build --release -p starknet-on-chain-setup --locked"
            crate_name: starknet-on-chain-setup
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.crate_name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target
          key: rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Upload ${{ matrix.name }} binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-binary
          path: target/release/${{ matrix.crate_name }}
          retention-days: 1
 

  build-test-binaries:
    name: Build test binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-tests"
            build_cmd: "cargo test -p node-tests --no-run --locked"
          - name: "signer-tests"
            build_cmd: "cargo test -p signer-tests --no-run --locked"
          - name: "e2e-tests"
            build_cmd: "cargo test -p e2e-tests --no-run --locked"
          - name: "concurrency-tests"
            build_cmd: "cargo test -p concurrency-tests --no-run --locked"
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: dtolnay/rust-toolchain@1.86.0

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Those are the only crates containings unit tests at the moment.
        # The list will have to be manually updated when otheres are added.
        include:
          - test_cmd: "cargo test -p db-node"
            crate_name: db-node
            cache_key: "default"
          - test_cmd: "cargo test -p nuts --no-default-features"
            crate_name: nuts
            cache_key: "no-default"
          - test_cmd: "cargo test -p nuts --features=starknet,sqlx,rusqlite,nut13,nut19"
            crate_name: nuts
            cache_key: "all-features"
          - test_cmd: "cargo test -p starknet-types --no-default-features"
            crate_name: starknet-types
            cache_key: "no-default"
          - test_cmd: "cargo test -p wallet --no-default-features"
            crate_name: wallet
            cache_key: "no-default"
          - test_cmd: "cargo test -p wallet --no-default-features --features=tls,tls-allow-self-signed"
            crate_name: wallet
            cache_key: "tls"

    steps:
      - uses: actions/checkout@v4

      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.crate_name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Rust debug libs cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-${{ matrix.cache_key }}-
            rust-${{ runner.os }}-unit-test-${{ matrix.crate_name }}-

      - name: Run test
        run: ${{ matrix.test_cmd }}

  mock-tests:
    name: "Integration Tests (Mock)"
    needs: [ build-app-binaries, build-test-binaries ]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: node
          PGUSER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"

      - name: Download node-mock binary
        uses: actions/download-artifact@v4
        with:
          name: node-mock-binary
          path: target/release/

      - name: Download signer binary
        uses: actions/download-artifact@v4
        with:
          name: signer-binary
          path: target/release/

      - name: Make binaries executable
        run: |
          chmod +x target/release/node
          chmod +x target/release/signer

      - name: Start signer service
        run: |
          RUST_LOG=info ROOT_KEY="${{ env.ROOT_KEY }}" GRPC_PORT=10001 ./target/release/signer &
          echo $! > signer.pid
        
      - name: Restore signer test binaries
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: rust-${{ runner.os }}-test-binaries-signer-tests-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( './crates/tests/signer-tests/Cargo.toml') }}-${{ hashFiles( './crates/tests/signer-tests/src/**') }}
          fail-on-cache-miss: true

      - name: Wait for signer service to be ready
        run: |
          echo "Waiting for signer to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10001; do sleep 1; done'
          
      - name: Run signer integration tests
        env:
          GRPC_PORT: 10001
          ROOT_KEY: "${{ env.ROOT_KEY }}"
        run: cargo test -p signer-tests

      - name: Start node service (mock)
        run: |
          RUST_LOG=info PG_URL="${{ env.PG_URL }}" SIGNER_URL="${{ env.SIGNER_URL }}" GRPC_PORT=10003 \
          ./target/release/node &
          echo $! > node.pid

      - name: Restore node test binaries
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: rust-${{ runner.os }}-test-binaries-node-tests-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( './crates/tests/node-tests/Cargo.toml') }}-${{ hashFiles( './crates/tests/node-tests/src/**') }}
          fail-on-cache-miss: true

      - name: Wait for node service to be ready
        run: |
          echo "Waiting for node to be ready..."
          timeout 60 bash -c 'until nc -z localhost 10003; do sleep 1; done'
          
      - name: Run node integration tests
        env:
          GRPC_PORT: 10003
        run: cargo test -p node-tests

      - name: Cleanup services
        if: always()
        run: |
          if [ -f signer.pid ]; then
            kill $(cat signer.pid) || true
            rm signer.pid
          fi
          if [ -f node.pid ]; then
            kill $(cat node.pid) || true
            rm node.pid
          fi

  # starknet-tests:
  #   name: "Integration Tests (Starknet)"
  #   needs: [ build-app-binaries, build-test-binaries ]
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: node
  #         PGUSER: postgres
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Remove unwanted files
  #       run: rm -f rust-toolchain.toml

  #     - uses: dtolnay/rust-toolchain@1.86.0
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Install protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         version: "28.x"
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Restore node-starknet binary
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: target
  #         key: node-starknet-binary-${{ github.run_id }}-${{ github.run_attempt }}
  #         fail-on-cache-miss: true

  #     - name: Restore signer binary
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: target
  #         key: signer-binary-${{ github.run_id }}-${{ github.run_attempt }}
  #         fail-on-cache-miss: true

  #     - name: Restore concurrency test binary
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: target
  #         key: concurrency-tests-${{ github.run_id }}-${{ github.run_attempt }}
  #         fail-on-cache-miss: true

  #     - name: Restore e2e test binary
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: target
  #         key: e2e-tests-${{ github.run_id }}-${{ github.run_attempt }}
  #         fail-on-cache-miss: true

  #     - name: Restore starknet-on-chain-setup binary
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: target
  #         key: starknet-on-chain-setup-binary-${{ github.run_id }}-${{ github.run_attempt }}
  #         fail-on-cache-miss: true

  #     - name: Start testnet services
  #       run: |
  #         docker compose -f docker-compose.ci-testnet.yml up -d

  #     - name: Wait for testnet services to be healthy
  #       run: |
  #         echo "Waiting for testnet services to be healthy..."
  #         sleep 5

  #     - name: Run starknet on-chain setup
  #       run: |
  #         RUST_LOG=info ./target/release/starknet-on-chain-setup \
  #           --chain-id=SN_DEVNET \
  #           --url=http://localhost:5050 \
  #           --private-key=0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9 \
  #           --account-address=0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691 \
  #           declare \
  #           --sierra-json=./contracts/invoice/target/release/invoice_payment_InvoicePayment.contract_class.json \
  #           --compiled-class-hash=$(cat ./contracts/invoice/compiled_class_hash.txt || echo "")

  #     - name: Start signer service
  #       run: |
  #         RUST_LOG=info ROOT_KEY="${{ env.ROOT_KEY }}" GRPC_PORT=10001 ./target/release/signer &
  #         echo $! > signer.pid

  #     - name: Start node service (starknet)
  #       run: |
  #         RUST_LOG=info PG_URL="${{ env.PG_URL }}" SIGNER_URL="${{ env.SIGNER_URL }}" \
  #         DNA_URI=http://localhost:7171 \
  #         CASHIER_PRIVATE_KEY=0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9 \
  #         GRPC_PORT=10003 \
  #         ./target/release/node --config ./crates/bin/node/config/local.toml &
  #         echo $! > node.pid

  #     - name: Wait for local services to be ready
  #       run: |
  #         echo "Waiting for signer to be ready..."
  #         timeout 60 bash -c 'until nc -z localhost 10001; do sleep 1; done'
          
  #         echo "Waiting for node to be ready..."
  #         timeout 60 bash -c 'until nc -z localhost 10003; do sleep 1; done'

  #     - name: Run basic health checks
  #       run: |
  #         pg_isready -h localhost -p 5432 -U postgres
  #         curl -f http://localhost:5050/is_alive

  #     - name: Cleanup CLI wallet DB
  #       if: always()
  #       run: rm -rf /home/runner/.local/share

  #     - name: Run E2E and concurrency tests
  #       env:
  #         NODE_URL: http://localhost:10003
  #         RPC_URL: http://localhost:5050
  #         PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
  #         ACCOUNT_ADDRESS: "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
  #       run: |
  #         cargo test -p e2e-tests
  #         cargo test -p concurrency-tests

  #     - name: Show logs on failure
  #       if: failure()
  #       run: |
  #         echo "=== Docker compose logs ==="
  #         docker compose -f docker-compose.ci-testnet.yml logs
  #         echo "=== Docker compose ps ==="
  #         docker compose -f docker-compose.ci-testnet.yml ps
  
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         if [ -f signer.pid ]; then
  #           kill $(cat signer.pid) || true
  #           rm signer.pid
  #         fi
  #         if [ -f node.pid ]; then
  #           kill $(cat node.pid) || true
  #           rm node.pid
  #         fi
  #         docker compose -f docker-compose.ci-testnet.yml down -v
  #         docker system prune -f
