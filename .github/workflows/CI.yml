name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  CARGO_TERM_COLOR: always
  ROOT_KEY: tprv8ZgxMBicQKsPeb6rodrmEXb1zRucvxYJgTKDhqQkZtbz8eY4Pf2EgbsT2swBXnnbDPQChQeFrFqHN72yFxzKfFAVsHdPeRWq2xqyUT2c4wH
  SIGNER_GRPC_PORT: 10001
  NODE_GRPC_PORT: 20001
  # For node
  PG_URL: postgres://postgres:password@localhost:5432/node
  SIGNER_URL: http://localhost:10001

jobs:
  fmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: clippy
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-clippy-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
          cache-all-crates: true
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --no-deps

  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
        - service: signer
        - service: starknet-setup
        - service: node
          features: starknet
          image_name: node
        - service: node
          features: starknet,mock,keyset-rotation
          image_name: node-mock
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/${{ matrix.service }}.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image_name || matrix.service }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image_name || matrix.service }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image_name || matrix.service }}:cache,mode=max
          build-args: |
            CARGO_FEATURES=${{ matrix.features || '' }}

  build-binary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
      
      - uses: Swatinem/rust-cache@v2

      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Build tests
        run: |
          cargo test -p node-tests --no-run
          cargo test -p signer-tests --no-run
          cargo test -p e2e-tests --no-run
          cargo test -p concurrency-tests --no-run
  
      - name: Cache test binaries for other jobs
        uses: actions/cache/save@v3
        with:
          path: target
          key: test-binaries-${{ github.run_id }}-${{ github.run_attempt }}

  unit-test:
    name: Unit-test
    strategy:
      matrix:
        include:
          - test_cmd: "cargo test -p node --no-default-features --features=starknet,mock,keyset-rotation,tls"
            cache_key: "node-mock-keyset-tls"
          - test_cmd: "cargo test -p node --no-default-features --features=starknet,keyset-rotation,tls"
            cache_key: "node-starknet-keyset-tls"
          - test_cmd: "cargo test -p signer --no-default-features"
            cache_key: "signer-default"
          - test_cmd: "cargo test -p cli-wallet --no-default-features"
            cache_key: "cli-wallet-default"
          - test_cmd: "cargo test -p cli-wallet --no-default-features --features=tls,tls-allow-self-signed"
            cache_key: "cli-wallet-tls"
          - test_cmd: "cargo test -p db-node --no-default-features"
            cache_key: "db-node-default"
          - test_cmd: "cargo test -p nuts --no-default-features"
            cache_key: "nuts-default"
          - test_cmd: "cargo test -p nuts --features=starknet,sqlx,nut19"
            cache_key: "nuts-starknet-sqlx-nut19"
          - test_cmd: "cargo test -p starknet-types --no-default-features"
            cache_key: "starknet-types-default"
          - test_cmd: "cargo test -p wallet --no-default-features"
            cache_key: "wallet-default"
          - test_cmd: "cargo test -p wallet --no-default-features --features=tls,tls-allow-self-signed"
            cache_key: "wallet-tls"
          - test_cmd: "cargo test -p liquidity-source --no-default-features"
            cache_key: "liquidity-source-default"
          - test_cmd: "cargo test -p starknet-on-chain-setup --no-default-features"
            cache_key: "starknet-on-chain-setup-default"
          - test_cmd: "cargo test -p starknet-payment-indexer --no-default-features"
            cache_key: "starknet-payment-indexer-default"
          - test_cmd: "cargo test -p starknet-liquidity-source --no-default-features"
            cache_key: "starknet-liquidity-source-default"
          - test_cmd: "cargo test -p starknet-liquidity-source --no-default-features --features=mock"
            cache_key: "starknet-liquidity-source-mock"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - uses: dtolnay/rust-toolchain@1.86.0
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"
      - name: Run test
        run: ${{ matrix.test_cmd }}

  mock-tests:
    name: "Integration Tests (Mock)"
    needs: [ build-images, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - uses: dtolnay/rust-toolchain@1.86.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image environment variables
        run: |
          echo "NODE_MOCK_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/node-mock:${GITHUB_SHA}" >> $GITHUB_ENV
          echo "SIGNER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/signer:${{ github.sha }}" >> $GITHUB_ENV
        
      - name: Restore test binaries
        uses: actions/cache/restore@v3
        with:
          path: target
          key: test-binaries-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true

      - name: Start integration service (mock)
        run: |
          docker compose -f docker-compose.ci-mock.yml up -d

      - name: Wait for integration services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            until docker compose -f docker-compose.ci-mock.yml ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(healthy|running)" | wc -l | grep -q "3"; do
              echo "Waiting for mock services to be ready..."
              sleep 2
              docker compose -f docker-compose.ci-mock.yml ps
            done
          '

      - name: Run node integration tests
        env:
          GRPC_PORT: 10003
        run: cargo test -p node-tests

      - name: Run signer integration tests
        env:
          GRPC_PORT: 10001
          ROOT_KEY: "${{ env.ROOT_KEY }}"
        run: cargo test -p signer-tests

      - name: Cleanup integration tests
        if: always()
        run: |
          docker compose -f docker-compose.ci-mock.yml down -v
          docker system prune -f

  starknet-tests:
    name: "Integration Tests (Starknet)"
    needs: [ build-images, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - uses: dtolnay/rust-toolchain@1.86.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image environment variables
        run: |
          echo "NODE_STARKNET_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/node:${GITHUB_SHA}" >> $GITHUB_ENV
          echo "SIGNER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/signer:${{ github.sha }}" >> $GITHUB_ENV
          echo "STARKNET_SETUP_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/starknet-setup:${{ github.sha }}" >> $GITHUB_ENV

      - name: Restore test binaries
        uses: actions/cache/restore@v3
        with:
          path: target
          key: test-binaries-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true

      - name: Start services  
        run: |
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            until docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(healthy|running)" | wc -l | grep -q "4"; do
              echo "Waiting for all services to be ready..."
              sleep 2
              docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml ps
            done
          '

      - name: Run basic health checks
        run: |
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml exec -T db pg_isready -U postgres
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml exec -T signer /bin/grpc_health_probe -addr=localhost:10001
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml exec -T node /bin/grpc_health_probe -addr=localhost:10003
          curl -f http://localhost:5050/is_alive

      - name: Cleanup CLI wallet DB
        if: always()
        run: rm -rf /home/runner/.local/share

      - name: Run E2E and concurrency tests
        env:
          NODE_URL: http://localhost:10003
          RPC_URL: http://localhost:5050
          PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
          ACCOUNT_ADDRESS: "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
        run: |
          cargo test -p e2e-tests
          cargo test -p concurrency-tests

      - name: Show logs on failure
        if: failure()
        run: |

          echo "=== Docker compose logs ==="
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml logs
          echo "=== Docker compose ps ==="
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml ps
  
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci-starknet.yml -f docker-compose.ci-testnet.yml down -v
          docker system prune -f
