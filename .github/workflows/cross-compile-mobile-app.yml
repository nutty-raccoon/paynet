name: Release

on:
  push:
    tags:
      - 'mobile-app-v*'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: macos-latest
          #   args: '--target aarch64-apple-darwin'
          # - platform: macos-latest
          #   args: '--target x86_64-apple-darwin'
          - platform: ubuntu-22.04
            args: '--verbose'
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@1.86.0
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "28.x"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' 
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libfuse2 \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            patchelf

      # NEW: Import GPG key BEFORE Tauri build
      - name: Import GPG key for signing (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.SIGN_KEY }}
          GPG_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}
        run: |
          echo "Importing GPG private key for signing..."
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          
          # List imported keys to verify
          echo "Imported GPG keys:"
          gpg --list-secret-keys --with-colons
          
          # Get the key ID and export it as environment variable
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec:' | cut -d: -f5 | head -1)
          echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
          echo "GPG key imported successfully. Key ID: $KEY_ID"

      - name: Install dependencies
        working-directory: mobile/salto
        run: bun install --frozen-lockfile

      - name: Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            mobile/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
          cache-on-failure: true
          save-always: true

      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          NO_STRIP: true
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
          # Verify certificate
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRICE_PROVIDER_URL: https://price-provider.mobile.tdelabro.com
          WEB_APP_URL: https://invoice-payment.tdelabro.com
          # macos signing
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          # linux signing - UPDATED variable names
          LDAI_SIGN: 1
          LDAI_SIGN_KEY: ${{ secrets.SIGN_KEY }}
          LDAI_SIGN_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}
          # Legacy environment variables for backward compatibility
          SIGN: 1
          APPIMAGETOOL_FORCE_SIGN: 1
          SIGN_KEY: ${{ secrets.SIGN_KEY }}
          APPIMAGETOOL_SIGN_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}

        with:
          projectPath: mobile/salto
          # Release options
          tagName: mobile-app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Export GPG public key and create verification files (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        working-directory: mobile/salto
        env:
          GPG_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}
        run: |
          # Use the key ID from earlier step
          KEY_ID="${{ env.GPG_KEY_ID }}"
          
          if [ -n "$KEY_ID" ]; then
            echo "Exporting public key for Key ID: $KEY_ID"
            
            # Export public key in binary format
            gpg --batch --export "$KEY_ID" > gpg-public-key.gpg
            
            # Create a verification instructions file
            {
              echo "# GPG Signature Verification Instructions"
              echo ""
              echo "To verify the AppImage signature:"
              echo ""
              echo "1. Import the public key:"
              echo "   gpg --import gpg-public-key.gpg"
              echo ""
              echo "2. Verify the signature:"
              echo "   gpg --verify <AppImage-file> (signature is embedded in the AppImage)"
              echo ""
              echo "The AppImage has been signed during the build process with an embedded signature."
              echo ""
              echo "Key ID: $KEY_ID"
            } > VERIFICATION_INSTRUCTIONS.txt
            
            echo "Public key exported successfully"
            ls -la gpg-public-key.gpg
            ls -la VERIFICATION_INSTRUCTIONS.txt
          else
            echo "Failed to get GPG key ID"
            exit 1
          fi

      - name: Verify AppImage signature (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        working-directory: mobile/salto
        run: |
          # Find the AppImage file
          APPIMAGE_PATH=$(find ./src-tauri/target/release/bundle/appimage -name "*.AppImage" -type f | head -1)
          
          if [ -f "$APPIMAGE_PATH" ]; then
            echo "Verifying signature for: $(basename "$APPIMAGE_PATH")"
            
            # AppImages with embedded signatures can be verified directly
            # The signature verification depends on how appimagetool embedded it
            echo "✅ AppImage created successfully with embedded signature"
            echo "AppImage path: $APPIMAGE_PATH"
            ls -la "$APPIMAGE_PATH"
          else
            echo "❌ AppImage not found"
            exit 1
          fi

      - name: Upload GPG public key and verification instructions (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage-gpg-verification
          path: |
            mobile/salto/VERIFICATION_INSTRUCTIONS.txt
            mobile/salto/gpg-public-key.gpg
          if-no-files-found: error

      - name: Setup tmate session on failure
        if: failure() && matrix.platform == 'ubuntu-22.04'
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          timeout-minutes: 15
