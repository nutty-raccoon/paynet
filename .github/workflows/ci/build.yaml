name: Build
on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-app-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-mock"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet,mock,keyset-rotation --locked"
            crate_name: node
          - name: "node-starknet"
            build_cmd: "cargo build --release -p node --no-default-features --features=starknet --locked"
            crate_name: node
          - name: "signer"
            build_cmd: "cargo build --release -p signer --locked"
            crate_name: signer
          - name: "starknet-on-chain-setup"
            build_cmd: "cargo build --release -p starknet-on-chain-setup --locked"
            crate_name: starknet-on-chain-setup
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      # Get the crate path for hash computation
      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.crate_name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libdbus-1-dev pkg-config
          version: 1.0
      
      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target
          key: rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-app-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Upload ${{ matrix.name }} binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-binary
          path: target/release/${{ matrix.crate_name }}
          retention-days: 1
 

  build-test-binaries:
    name: Build test binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "node-tests"
            build_cmd: "cargo test -p node-tests --no-run --locked"
          - name: "signer-tests"
            build_cmd: "cargo test -p signer-tests --no-run --locked"
          - name: "e2e-tests"
            build_cmd: "cargo test -p e2e-tests --no-run --locked"
          - name: "concurrency-tests"
            build_cmd: "cargo test -p concurrency-tests --no-run --locked"
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libdbus-1-dev pkg-config
          version: 1.0

      - uses: dtolnay/rust-toolchain@1.86.0

      - name: Get crate source path
        id: get-crate-path
        run: |
          CRATE_PATH=$(cargo info ${{ matrix.name }} | grep -o '(from [^)]*' | sed 's/(from //')
          echo "crate_path=${CRATE_PATH}" >> $GITHUB_OUTPUT
          echo "Crate path: ${CRATE_PATH}"

      - name: Restore ${{ matrix.name }} binary cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}-${{ hashFiles( format('{0}/src/**', steps.get-crate-path.outputs.crate_path)) }}
          restore-keys: |
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles( format('{0}/Cargo.toml', steps.get-crate-path.outputs.crate_path)) }}
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}-
            rust-${{ runner.os }}-test-binaries-${{ matrix.name }}-

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Extract and upload ${{ matrix.name }} test binaries
        run: |
          # Extract binary paths using the shell oneliner
          binaries=$(${{ matrix.build_cmd }} 2>&1 | grep "Executable" | sed 's/.*(\(.*\))/\1/')
          
          if [ -z "$binaries" ]; then
            echo "Error: Could not find any test binaries for ${{ matrix.name }}"
            exit 1
          fi
          
          # Create a directory for the artifact
          mkdir -p ./test-binaries/
          
          # Copy each binary with its original name
          for binary in $binaries; do
            if [ -f "$binary" ]; then
              binary_name=$(basename "$binary")
              cp "$binary" "./test-binaries/$binary_name"
              chmod +x "./test-binaries/$binary_name"
              echo "Copied: $binary -> ./test-binaries/$binary_name"
            else
              echo "Warning: Binary not found: $binary"
            fi
          done
          
          # List what we have
          echo "Test binaries prepared:"
          ls -l ./test-binaries/

      - name: Upload ${{ matrix.name }} test binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-test-binaries
          path: ./test-binaries
          retention-days: 1

  build-starknet-contracts:
    name: Build Starknet contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            contracts/starknet/invoice
          sparse-checkout-cone-mode: false

      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.12.0"
          scarb-lock: contracts/starknet/invoice/Scarb.lock
          cache: true
          cache-targets: true
      
      - name: Install Starkli
        run: |
          mkdir -p /tmp/tools
          curl -s -L https://github.com/xJonathanLEI/starkli/releases/download/v0.4.2/starkli-$(uname -m)-unknown-linux-gnu.tar.gz | tar xz -C /tmp/tools/
          chmod +x /tmp/tools/starkli
      
      - name: Build contracts
        working-directory: ./contracts/starknet/invoice
        run: scarb --profile release build
      
      - name: Generate compiled class hash
        working-directory: ./contracts/starknet/invoice
        run: |
          /tmp/tools/starkli class-hash ./target/release/invoice_payment_InvoicePayment.compiled_contract_class.json > ./compiled_class_hash.txt
      
      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: starknet-contracts
          path: |
            contracts/starknet/invoice/target/release/invoice_payment_InvoicePayment.contract_class.json
            contracts/starknet/invoice/compiled_class_hash.txt
          retention-days: 1

  build-ethereum-contracts:
    name: Build Ethereum contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            contracts/ethereum/invoice
            .gitmodules
          sparse-checkout-cone-mode: false

      - uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        working-directory: ./contracts/ethereum/invoice
        run: forge install

      - name: Show Forge version
        working-directory: ./contracts/ethereum/invoice
        run: forge --version

      - name: Check Formatting
        working-directory: ./contracts/ethereum/invoice
        run: forge fmt --check

      - name: Build contracts
        working-directory: ./contracts/ethereum/invoice
        run: forge build
      
      - name: Test contracts
        working-directory: ./contracts/ethereum/invoice
        run: forge test

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ethereum-contracts
          path: |
            contracts/ethereum/invoice/out/InvoicePayment.sol/InvoicePayment.json
            contracts/ethereum/invoice/out/InvoicePayment.sol/IInvoicePayment.json
          retention-days: 1
