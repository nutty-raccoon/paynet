syntax = "proto3";

package node;

import "bdhke.proto";

service Node {
  // Keyset
  rpc Keysets (GetKeysetsRequest) returns (GetKeysetsResponse);
  // Swap
  rpc Swap (SwapRequest) returns (SwapResponse);
  // Mint
  rpc MintQuote (MintQuoteRequest) returns (MintQuoteResponse);
  rpc Mint (MintRequest) returns (MintResponse);
  rpc MintQuoteState (QuoteStateRequest) returns (MintQuoteResponse);
  // Melt
  rpc Melt (MeltRequest) returns (MeltResponse);
  rpc MeltQuoteState (QuoteStateRequest) returns (MeltResponse);

  // TODO: add Acknowledgment route
  // for the client to say he successfully stored the quote_id
}

message GetKeysetsRequest {}

message GetKeysetsResponse {
  repeated Keyset keysets = 1;
}

message Keyset {
  bytes id = 1;
  string unit = 2;
  bool active = 3;
}

message MintQuoteRequest {
  string method = 1;
  uint64 amount = 2;
  string unit = 3;
  optional string description = 4; 
}

message MintQuoteResponse {
  string quote = 1;
  string request = 2;
  MintQuoteState state = 3; 
  uint64 expiry = 4;
}

enum MintQuoteState {
  MNQS_UNSPECIFIED = 0;
  MNQS_UNPAID = 1;
  MNQS_PAID = 2;
  MNQS_ISSUED = 3;
}

message MintRequest {
  string method = 1;
  string quote = 2;
  repeated bdhke.BlindedMessage outputs = 3;
}

message QuoteStateRequest {
  string method = 1;
  string quote = 2;
}

message MintResponse {
  repeated bdhke.BlindSignature signatures = 1;
}

message MeltRequest {
  string method = 1;
  string unit = 2;
  string request = 3;
  repeated bdhke.Proof inputs = 4;
}

message MeltResponse {
  string quote = 1;
  uint64 amount = 2;
  uint64 fee = 3;
  MeltState state = 4;
  uint64 expiry = 5;
}

enum MeltState {
  MLQS_UNSPECIFIED = 0;
  MLQS_UNPAID = 1;
  MLQS_PENDING = 2;
  MLQS_PAID = 3;
}

message SwapRequest {
  repeated bdhke.Proof inputs = 1;
  repeated bdhke.BlindedMessage outputs = 2;
}

message SwapResponse {
  repeated bdhke.BlindSignature signatures = 1;
}

